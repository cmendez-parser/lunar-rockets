// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/messages": {
            "post": {
                "description": "Process and store a new rocket message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "Receive a message",
                "parameters": [
                    {
                        "description": "Message to be processed",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.RocketMessage"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Message accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/rockets": {
            "get": {
                "description": "Retrieve a list of all available rockets with optional sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rockets"
                ],
                "summary": "List all rockets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sort field ('channel','type','speed','mission','status')",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order ('asc' or 'desc')",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Rocket"
                            }
                        }
                    }
                }
            }
        },
        "/rockets/{channel}": {
            "get": {
                "description": "Retrieve details of a specific rocket by its channel ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "rockets"
                ],
                "summary": "Get a specific rocket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Rocket Channel ID",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Rocket"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Rocket not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.MessageMetadata": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string"
                },
                "messageNumber": {
                    "type": "integer"
                },
                "messageTime": {
                    "type": "string"
                },
                "messageType": {
                    "type": "string"
                }
            }
        },
        "domain.Rocket": {
            "type": "object",
            "properties": {
                "channel": {
                    "description": "Unique identifier for the rocket",
                    "type": "string"
                },
                "explodedAt": {
                    "description": "Time when the rocket exploded, if applicable",
                    "type": "string"
                },
                "lastMessage": {
                    "description": "Last message number processed",
                    "type": "integer"
                },
                "lastUpdated": {
                    "description": "Last time the rocket state was updated",
                    "type": "string"
                },
                "launchTime": {
                    "description": "Time when the rocket was launched",
                    "type": "string"
                },
                "mission": {
                    "description": "Current mission",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason for explosion, if applicable",
                    "type": "string"
                },
                "speed": {
                    "description": "Current speed of the rocket",
                    "type": "integer"
                },
                "status": {
                    "description": "Current status",
                    "type": "string"
                },
                "type": {
                    "description": "Type of rocket",
                    "type": "string"
                }
            }
        },
        "domain.RocketMessage": {
            "type": "object",
            "properties": {
                "message": {},
                "metadata": {
                    "$ref": "#/definitions/domain.MessageMetadata"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8088",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Lunar Rockets API",
	Description:      "API for managing lunar rockets and their messages",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
